//                                       _      
//                                      | |     
//          _ __ ___  ___  ___   ___  __| | ___ 
//         | '_ ` _ \/ __|/ _ \ / _ \/ _` |/ _ \
//         | | | | | \__ \ (_) |  __/ (_| |  __/
//         |_|_|_| |_|___/\___/ \___|\__,_|\___|
//          / ____| |                           
//         | |    | |__   ___  ___ ___          
//         | |    | '_ \ / _ \/ __/ __|         
//         | |____| | | |  __/\__ \__ \         
//          \_____|_| |_|\___||___/___/   
//
package chess;

import chess.Objects.Board;
import chess.Objects.Piece;

/**
 * @author Mikkel Soede
 * @version 1.0
 * @description
 * @date
 */
public class Evaluation {

    // pawn table
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //| 10 | 10 |  0 |-10 |-10 |  0 | 10 | 10 |
    //+----+----+----+----+----+----+----+----+
    //|  5 |  0 |  0 |  5 |  5 |  0 |  0 |  5 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 | 10 | 20 | 20 | 10 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //|  5 |  5 |  5 | 10 | 10 |  5 |  5 |  5 |
    //+----+----+----+----+----+----+----+----+
    //| 10 | 10 | 10 | 20 | 20 | 10 | 10 | 10 |
    //+----+----+----+----+----+----+----+----+
    //| 20 | 20 | 20 | 30 | 30 | 20 | 20 | 20 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    private final int[][] pawnScore = new int[][]{
        {0, 0, 0, 0, 0, 0, 0, 0},
        {10, 10, 0, -10, -10, 0, 10, 10},
        {5, 0, 0, 5, 5, 0, 0, 5},
        {0, 0, 10, 20, 20, 10, 0, 0},
        {5, 5, 5, 10, 10, 5, 5, 5},
        {10, 10, 10, 20, 20, 10, 10, 10},
        {20, 20, 20, 30, 30, 20, 20, 20},
        {0, 0, 0, 0, 0, 0, 0, 0}
    };
    //knight table
    //+----+-----+----+----+----+----+-----+----+
    //|  0 | -10 |  0 |  0 |  0 |  0 | -10 | 0  |
    //+----+-----+----+----+----+----+-----+----+
    //|  0 |   0 |  0 |  5 |  5 |  0 |   0 |  0 |
    //+----+-----+----+----+----+----+-----+----+
    //|  0 |   0 | 10 | 10 | 10 | 10 |   0 |  0 |
    //+----+-----+----+----+----+----+-----+----+
    //|  0 |   0 | 10 | 20 | 20 | 10 |   5 |  0 |
    //+----+-----+----+----+----+----+-----+----+
    //|  5 |  10 | 15 | 20 | 20 | 15 |  10 |  5 |
    //+----+-----+----+----+----+----+-----+----+
    //|  5 |  10 | 10 | 20 | 20 | 10 |  10 |  5 |
    //+----+-----+----+----+----+----+-----+----+
    //|  0 |   0 |  5 | 10 | 10 |  5 |   0 |  0 |
    //+----+-----+----+----+----+----+-----+----+
    //|  0 |   0 |  0 |  0 |  0 |  0 |   0 |  0 |
    //+----+-----+----+----+----+----+-----+----+
    private final int[][] knightScore = new int[][]{
        {0, -10, 0, 0, 0, 0, -10, 0},
        {0, 0, 0, 5, 5, 0, 0, 0},
        {0, 0, 10, 10, 10, 10, 0, 0},
        {0, 0, 10, 20, 20, 10, 5, 0},
        {5, 10, 15, 20, 20, 15, 10, 5},
        {5, 10, 10, 20, 20, 10, 10, 5},
        {0, 0, 5, 10, 10, 5, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0}
    };
    //bishop table
    //+----+----+-----+----+----+-----+----+----+
    //|  0 |  0 | -10 |  0 |  0 | -10 |  0 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    //|  0 |  0 |   0 | 10 | 10 |   0 |  0 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    //|  0 |  0 |  10 | 15 | 15 |  10 |  0 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    //|  0 | 10 |  15 | 20 | 20 |  15 | 10 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    //|  0 | 10 |  15 | 20 | 20 |  15 | 10 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    //|  0 |  0 |  10 | 15 | 15 |  10 |  0 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    //|  0 |  0 |   0 | 10 | 10 |   0 |  0 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    //|  0 |  0 |   0 |  0 |  0 |   0 |  0 |  0 |
    //+----+----+-----+----+----+-----+----+----+
    private final int[][] bishopScore = new int[][]{
        {0, 0, -10, 0, 0, -10, 0, 0},
        {0, 0, 0, 10, 10, 0, 0, 0},
        {0, 0, 10, 15, 15, 10, 0, 0},
        {0, 10, 15, 20, 20, 15, 10, 0},
        {0, 10, 15, 20, 20, 15, 10, 0},
        {0, 0, 10, 15, 15, 10, 0, 0},
        {0, 0, 0, 10, 10, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0}
    };
    //rock table
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  5 | 10 | 10 |  5 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  5 | 10 | 10 |  5 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  5 | 10 | 10 |  5 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  5 | 10 | 10 |  5 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  5 | 10 | 10 |  5 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  5 | 10 | 10 |  5 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    //| 25 | 25 | 25 | 25 | 25 | 25 | 25 | 25 |
    //+----+----+----+----+----+----+----+----+
    //|  0 |  0 |  5 | 10 | 10 |  5 |  0 |  0 |
    //+----+----+----+----+----+----+----+----+
    private final int[][] rookScore = new int[][]{
        {0, 0, 5, 10, 10, 5, 0, 0},
        {0, 0, 5, 10, 10, 5, 0, 0},
        {0, 0, 5, 10, 10, 5, 0, 0},
        {0, 0, 5, 10, 10, 5, 0, 0},
        {0, 0, 5, 10, 10, 5, 0, 0},
        {0, 0, 5, 10, 10, 5, 0, 0},
        {25, 25, 25, 25, 25, 25, 25, 25},
        {0, 0, 5, 10, 10, 5, 0, 0}
    };
    //queen table
    //+---+---+---+---+---+---+---+---+
    //| 2 | 3 | 4 | 3 | 4 | 3 | 3 | 2 |
    //+---+---+---+---+---+---+---+---+
    //| 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 |
    //+---+---+---+---+---+---+---+---+
    //| 3 | 4 | 4 | 4 | 4 | 4 | 4 | 3 |
    //+---+---+---+---+---+---+---+---+
    //| 3 | 3 | 4 | 4 | 4 | 4 | 4 | 3 |
    //+---+---+---+---+---+---+---+---+
    //| 2 | 3 | 3 | 4 | 4 | 3 | 3 | 2 |
    //+---+---+---+---+---+---+---+---+
    //| 2 | 2 | 2 | 3 | 3 | 2 | 2 | 2 |
    //+---+---+---+---+---+---+---+---+
    //| 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    private final int[][] queenScore = new int[][]{
        {2, 3, 4, 3, 4, 3, 3, 2},
        {2, 3, 4, 4, 4, 4, 3, 2},
        {3, 4, 4, 4, 4, 4, 4, 3},
        {3, 3, 4, 4, 4, 4, 4, 3},
        {2, 3, 3, 4, 4, 3, 3, 2},
        {2, 2, 2, 3, 3, 2, 2, 2},
        {2, 2, 2, 2, 2, 2, 2, 2},
        {0, 0, 0, 0, 0, 0, 0, 0}
    };
    //king table
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    //| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
    //+---+---+---+---+---+---+---+---+
    private final int[][] kingScore = new int[][]{
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

    /**
     * gives the board position score
     *
     * @param board
     * @return
     */
    public int evaluateBoard(Board board) {
        int score = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                Piece tempPiece = board.getPiece(i, j);
                if (board.getPiece(i, j) == null) {
                    continue; // empty piece
                }
                String pieceName = tempPiece.getName();
                boolean pieceColor = tempPiece.getPlayerColor();
                int tempScore = 0;
                switch (pieceName) {
                    case "Pawn":
                        tempScore = pawnScore[i][j];
                        break;
                    case "Queen":
                        tempScore = queenScore[i][j];
                        break;
                    case "King":
                        tempScore = kingScore[i][j];
                        break;
                    case "Bishop":
                        tempScore = bishopScore[i][j];
                        break;
                    case "Knight":
                        tempScore = knightScore[i][j];
                        break;
                    case "Rook":
                        tempScore = rookScore[i][j];
                        break;
                }
                //score += pieceColor ? tempScore : -tempScore;
                score += tempScore;
                //System.out.println("Score(" + i + "," + j + ") piece: " + pieceName + "\t    color: " + pieceColor + " \tscore:" + tempScore + " total score: " + score);
            }
        }
        return score;
    }
}
